#!/usr/bin/env python
from src.options import get_options
from src.profile import ProfileFactory
from src.statistics import get_rank_statistics, write_statistics
from loguru import logger
import os

def main_script():
    opts = get_options()

    profile_factory = ProfileFactory()

    stats_dict = dict()
    abundance_stats_dict = dict()

    detailed_out = open(opts.detailed_output, 'w') if opts.detailed_output else None

    logger.info(f"Number of prediction items: {len(opts.predictions)}")
    for tool, files in opts.predictions.items():
        logger.info(f"Tool: {tool}\nFiles: {files}}}")
        if tool not in stats_dict:
            stats_dict[tool] = []
            abundance_stats_dict[tool] = []

        if len(files) != len(opts.gold_std_files):
            logger.exception(f"Number of prediction profiles ({len(files)}) is not the same as number of goldstd profiles ({len(opts.gold_std_files)})")
        else:
            logger.info(f"{len(files)} profile - goldstd pairs to process")

        for gold_std_file, prediction_file in zip(opts.gold_std_files, files):
            if not os.path.exists(gold_std_file):
                logger.exception(f"Gold Std file {gold_std_file} does not exist")
            if not os.path.exists(prediction_file):
                logger.exception(f"Prediction file {prediction_file} does not exist")

            logger.info(f"Read Gold Standard File: {gold_std_file}")
            gold_std = profile_factory(
                gold_std_file,
                name_column=opts.gold_columns['name'],
                lineage_column=opts.gold_columns['lineage'],
                abundance_column=opts.gold_columns['abundance'],
                rank_column=opts.gold_columns['rank'])

            logger.info(f"Read Prediction File: {prediction_file}")
            prediction = profile_factory(
                prediction_file,
                name_column=opts.prediction_columns[tool]['name'],
                lineage_column=opts.prediction_columns[tool]['lineage'],
                abundance_column=opts.prediction_columns[tool]['abundance'],
                rank_column=opts.prediction_columns[tool]['rank'])

            logger.info(f"Compute statistics for ranks {opts.ranks}")
            rank_stats, abundance_stats = get_rank_statistics(gold_std, prediction, ranks=opts.ranks,
                                                              labeled_profile_output=detailed_out)
            stats_dict[tool].append(rank_stats)
            abundance_stats_dict[tool].append(abundance_stats)

    if detailed_out:
        detailed_out.close()

    write_statistics(opts.output, stats_dict, abundance_stats_dict)


if __name__ == '__main__':
    main_script()
